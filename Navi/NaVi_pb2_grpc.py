# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import NaVi_pb2 as NaVi__pb2


class NaViServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.startLocalisation = channel.unary_unary(
                '/NaViInterface.NaViService/startLocalisation',
                request_serializer=NaVi__pb2.Pose.SerializeToString,
                response_deserializer=NaVi__pb2.Empty.FromString,
                )
        self.stopLocalisation = channel.unary_unary(
                '/NaViInterface.NaViService/stopLocalisation',
                request_serializer=NaVi__pb2.Empty.SerializeToString,
                response_deserializer=NaVi__pb2.Empty.FromString,
                )
        self.startPathfinding = channel.unary_unary(
                '/NaViInterface.NaViService/startPathfinding',
                request_serializer=NaVi__pb2.Pose.SerializeToString,
                response_deserializer=NaVi__pb2.Empty.FromString,
                )
        self.stopPathfinding = channel.unary_unary(
                '/NaViInterface.NaViService/stopPathfinding',
                request_serializer=NaVi__pb2.Empty.SerializeToString,
                response_deserializer=NaVi__pb2.Empty.FromString,
                )
        self.setTarget = channel.unary_unary(
                '/NaViInterface.NaViService/setTarget',
                request_serializer=NaVi__pb2.Target.SerializeToString,
                response_deserializer=NaVi__pb2.Empty.FromString,
                )
        self.driveToTarget = channel.unary_unary(
                '/NaViInterface.NaViService/driveToTarget',
                request_serializer=NaVi__pb2.Empty.SerializeToString,
                response_deserializer=NaVi__pb2.TargetStatus.FromString,
                )
        self.wait = channel.unary_unary(
                '/NaViInterface.NaViService/wait',
                request_serializer=NaVi__pb2.Empty.SerializeToString,
                response_deserializer=NaVi__pb2.Empty.FromString,
                )
        self.resume = channel.unary_unary(
                '/NaViInterface.NaViService/resume',
                request_serializer=NaVi__pb2.Empty.SerializeToString,
                response_deserializer=NaVi__pb2.Empty.FromString,
                )
        self.abort = channel.unary_unary(
                '/NaViInterface.NaViService/abort',
                request_serializer=NaVi__pb2.Empty.SerializeToString,
                response_deserializer=NaVi__pb2.Empty.FromString,
                )
        self.getCurrentPose = channel.unary_unary(
                '/NaViInterface.NaViService/getCurrentPose',
                request_serializer=NaVi__pb2.Empty.SerializeToString,
                response_deserializer=NaVi__pb2.Pose.FromString,
                )
        self.beginPoseStream = channel.unary_stream(
                '/NaViInterface.NaViService/beginPoseStream',
                request_serializer=NaVi__pb2.Empty.SerializeToString,
                response_deserializer=NaVi__pb2.Pose.FromString,
                )
        self.endPoseStream = channel.unary_unary(
                '/NaViInterface.NaViService/endPoseStream',
                request_serializer=NaVi__pb2.Empty.SerializeToString,
                response_deserializer=NaVi__pb2.Empty.FromString,
                )
        self.beginBackgroundCloudCapture = channel.unary_unary(
                '/NaViInterface.NaViService/beginBackgroundCloudCapture',
                request_serializer=NaVi__pb2.Empty.SerializeToString,
                response_deserializer=NaVi__pb2.Empty.FromString,
                )
        self.endBackgroundCloudCapture = channel.unary_unary(
                '/NaViInterface.NaViService/endBackgroundCloudCapture',
                request_serializer=NaVi__pb2.Empty.SerializeToString,
                response_deserializer=NaVi__pb2.Empty.FromString,
                )
        self.getCurrentCloud = channel.unary_unary(
                '/NaViInterface.NaViService/getCurrentCloud',
                request_serializer=NaVi__pb2.Empty.SerializeToString,
                response_deserializer=NaVi__pb2.PointCloud.FromString,
                )
        self.beginCloudStream = channel.unary_stream(
                '/NaViInterface.NaViService/beginCloudStream',
                request_serializer=NaVi__pb2.Empty.SerializeToString,
                response_deserializer=NaVi__pb2.PointCloud.FromString,
                )
        self.endCloudStream = channel.unary_unary(
                '/NaViInterface.NaViService/endCloudStream',
                request_serializer=NaVi__pb2.Empty.SerializeToString,
                response_deserializer=NaVi__pb2.Empty.FromString,
                )
        self.getPath = channel.unary_unary(
                '/NaViInterface.NaViService/getPath',
                request_serializer=NaVi__pb2.Empty.SerializeToString,
                response_deserializer=NaVi__pb2.Path.FromString,
                )
        self.openSoilSampleContainer = channel.unary_unary(
                '/NaViInterface.NaViService/openSoilSampleContainer',
                request_serializer=NaVi__pb2.Empty.SerializeToString,
                response_deserializer=NaVi__pb2.Empty.FromString,
                )
        self.closeSoilSampleContainer = channel.unary_unary(
                '/NaViInterface.NaViService/closeSoilSampleContainer',
                request_serializer=NaVi__pb2.Empty.SerializeToString,
                response_deserializer=NaVi__pb2.Empty.FromString,
                )
        self.getSoilSampleWeight = channel.unary_unary(
                '/NaViInterface.NaViService/getSoilSampleWeight',
                request_serializer=NaVi__pb2.Empty.SerializeToString,
                response_deserializer=NaVi__pb2.Weight.FromString,
                )
        self.getDrillWeight = channel.unary_unary(
                '/NaViInterface.NaViService/getDrillWeight',
                request_serializer=NaVi__pb2.Empty.SerializeToString,
                response_deserializer=NaVi__pb2.Weight.FromString,
                )
        self.movePtfRelative = channel.unary_unary(
                '/NaViInterface.NaViService/movePtfRelative',
                request_serializer=NaVi__pb2.PtfValues.SerializeToString,
                response_deserializer=NaVi__pb2.Empty.FromString,
                )
        self.getTelemetry = channel.unary_unary(
                '/NaViInterface.NaViService/getTelemetry',
                request_serializer=NaVi__pb2.Empty.SerializeToString,
                response_deserializer=NaVi__pb2.Telemetry.FromString,
                )
        self.isReachable = channel.unary_unary(
                '/NaViInterface.NaViService/isReachable',
                request_serializer=NaVi__pb2.Empty.SerializeToString,
                response_deserializer=NaVi__pb2.Empty.FromString,
                )


class NaViServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def startLocalisation(self, request, context):
        """Setup
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopLocalisation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startPathfinding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopPathfinding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setTarget(self, request, context):
        """General functionality from State Machine
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def driveToTarget(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def wait(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def resume(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def abort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCurrentPose(self, request, context):
        """Getting data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def beginPoseStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def endPoseStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def beginBackgroundCloudCapture(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def endBackgroundCloudCapture(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCurrentCloud(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def beginCloudStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def endCloudStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPath(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def openSoilSampleContainer(self, request, context):
        """For specialist
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def closeSoilSampleContainer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSoilSampleWeight(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDrillWeight(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def movePtfRelative(self, request, context):
        """For PTF GS
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTelemetry(self, request, context):
        """Other Cameras
        TODO: Do a proof of concept and implement

        General things
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isReachable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NaViServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'startLocalisation': grpc.unary_unary_rpc_method_handler(
                    servicer.startLocalisation,
                    request_deserializer=NaVi__pb2.Pose.FromString,
                    response_serializer=NaVi__pb2.Empty.SerializeToString,
            ),
            'stopLocalisation': grpc.unary_unary_rpc_method_handler(
                    servicer.stopLocalisation,
                    request_deserializer=NaVi__pb2.Empty.FromString,
                    response_serializer=NaVi__pb2.Empty.SerializeToString,
            ),
            'startPathfinding': grpc.unary_unary_rpc_method_handler(
                    servicer.startPathfinding,
                    request_deserializer=NaVi__pb2.Pose.FromString,
                    response_serializer=NaVi__pb2.Empty.SerializeToString,
            ),
            'stopPathfinding': grpc.unary_unary_rpc_method_handler(
                    servicer.stopPathfinding,
                    request_deserializer=NaVi__pb2.Empty.FromString,
                    response_serializer=NaVi__pb2.Empty.SerializeToString,
            ),
            'setTarget': grpc.unary_unary_rpc_method_handler(
                    servicer.setTarget,
                    request_deserializer=NaVi__pb2.Target.FromString,
                    response_serializer=NaVi__pb2.Empty.SerializeToString,
            ),
            'driveToTarget': grpc.unary_unary_rpc_method_handler(
                    servicer.driveToTarget,
                    request_deserializer=NaVi__pb2.Empty.FromString,
                    response_serializer=NaVi__pb2.TargetStatus.SerializeToString,
            ),
            'wait': grpc.unary_unary_rpc_method_handler(
                    servicer.wait,
                    request_deserializer=NaVi__pb2.Empty.FromString,
                    response_serializer=NaVi__pb2.Empty.SerializeToString,
            ),
            'resume': grpc.unary_unary_rpc_method_handler(
                    servicer.resume,
                    request_deserializer=NaVi__pb2.Empty.FromString,
                    response_serializer=NaVi__pb2.Empty.SerializeToString,
            ),
            'abort': grpc.unary_unary_rpc_method_handler(
                    servicer.abort,
                    request_deserializer=NaVi__pb2.Empty.FromString,
                    response_serializer=NaVi__pb2.Empty.SerializeToString,
            ),
            'getCurrentPose': grpc.unary_unary_rpc_method_handler(
                    servicer.getCurrentPose,
                    request_deserializer=NaVi__pb2.Empty.FromString,
                    response_serializer=NaVi__pb2.Pose.SerializeToString,
            ),
            'beginPoseStream': grpc.unary_stream_rpc_method_handler(
                    servicer.beginPoseStream,
                    request_deserializer=NaVi__pb2.Empty.FromString,
                    response_serializer=NaVi__pb2.Pose.SerializeToString,
            ),
            'endPoseStream': grpc.unary_unary_rpc_method_handler(
                    servicer.endPoseStream,
                    request_deserializer=NaVi__pb2.Empty.FromString,
                    response_serializer=NaVi__pb2.Empty.SerializeToString,
            ),
            'beginBackgroundCloudCapture': grpc.unary_unary_rpc_method_handler(
                    servicer.beginBackgroundCloudCapture,
                    request_deserializer=NaVi__pb2.Empty.FromString,
                    response_serializer=NaVi__pb2.Empty.SerializeToString,
            ),
            'endBackgroundCloudCapture': grpc.unary_unary_rpc_method_handler(
                    servicer.endBackgroundCloudCapture,
                    request_deserializer=NaVi__pb2.Empty.FromString,
                    response_serializer=NaVi__pb2.Empty.SerializeToString,
            ),
            'getCurrentCloud': grpc.unary_unary_rpc_method_handler(
                    servicer.getCurrentCloud,
                    request_deserializer=NaVi__pb2.Empty.FromString,
                    response_serializer=NaVi__pb2.PointCloud.SerializeToString,
            ),
            'beginCloudStream': grpc.unary_stream_rpc_method_handler(
                    servicer.beginCloudStream,
                    request_deserializer=NaVi__pb2.Empty.FromString,
                    response_serializer=NaVi__pb2.PointCloud.SerializeToString,
            ),
            'endCloudStream': grpc.unary_unary_rpc_method_handler(
                    servicer.endCloudStream,
                    request_deserializer=NaVi__pb2.Empty.FromString,
                    response_serializer=NaVi__pb2.Empty.SerializeToString,
            ),
            'getPath': grpc.unary_unary_rpc_method_handler(
                    servicer.getPath,
                    request_deserializer=NaVi__pb2.Empty.FromString,
                    response_serializer=NaVi__pb2.Path.SerializeToString,
            ),
            'openSoilSampleContainer': grpc.unary_unary_rpc_method_handler(
                    servicer.openSoilSampleContainer,
                    request_deserializer=NaVi__pb2.Empty.FromString,
                    response_serializer=NaVi__pb2.Empty.SerializeToString,
            ),
            'closeSoilSampleContainer': grpc.unary_unary_rpc_method_handler(
                    servicer.closeSoilSampleContainer,
                    request_deserializer=NaVi__pb2.Empty.FromString,
                    response_serializer=NaVi__pb2.Empty.SerializeToString,
            ),
            'getSoilSampleWeight': grpc.unary_unary_rpc_method_handler(
                    servicer.getSoilSampleWeight,
                    request_deserializer=NaVi__pb2.Empty.FromString,
                    response_serializer=NaVi__pb2.Weight.SerializeToString,
            ),
            'getDrillWeight': grpc.unary_unary_rpc_method_handler(
                    servicer.getDrillWeight,
                    request_deserializer=NaVi__pb2.Empty.FromString,
                    response_serializer=NaVi__pb2.Weight.SerializeToString,
            ),
            'movePtfRelative': grpc.unary_unary_rpc_method_handler(
                    servicer.movePtfRelative,
                    request_deserializer=NaVi__pb2.PtfValues.FromString,
                    response_serializer=NaVi__pb2.Empty.SerializeToString,
            ),
            'getTelemetry': grpc.unary_unary_rpc_method_handler(
                    servicer.getTelemetry,
                    request_deserializer=NaVi__pb2.Empty.FromString,
                    response_serializer=NaVi__pb2.Telemetry.SerializeToString,
            ),
            'isReachable': grpc.unary_unary_rpc_method_handler(
                    servicer.isReachable,
                    request_deserializer=NaVi__pb2.Empty.FromString,
                    response_serializer=NaVi__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'NaViInterface.NaViService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NaViService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def startLocalisation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/startLocalisation',
            NaVi__pb2.Pose.SerializeToString,
            NaVi__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopLocalisation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/stopLocalisation',
            NaVi__pb2.Empty.SerializeToString,
            NaVi__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startPathfinding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/startPathfinding',
            NaVi__pb2.Pose.SerializeToString,
            NaVi__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopPathfinding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/stopPathfinding',
            NaVi__pb2.Empty.SerializeToString,
            NaVi__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setTarget(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/setTarget',
            NaVi__pb2.Target.SerializeToString,
            NaVi__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def driveToTarget(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/driveToTarget',
            NaVi__pb2.Empty.SerializeToString,
            NaVi__pb2.TargetStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def wait(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/wait',
            NaVi__pb2.Empty.SerializeToString,
            NaVi__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def resume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/resume',
            NaVi__pb2.Empty.SerializeToString,
            NaVi__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def abort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/abort',
            NaVi__pb2.Empty.SerializeToString,
            NaVi__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCurrentPose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/getCurrentPose',
            NaVi__pb2.Empty.SerializeToString,
            NaVi__pb2.Pose.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def beginPoseStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/NaViInterface.NaViService/beginPoseStream',
            NaVi__pb2.Empty.SerializeToString,
            NaVi__pb2.Pose.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def endPoseStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/endPoseStream',
            NaVi__pb2.Empty.SerializeToString,
            NaVi__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def beginBackgroundCloudCapture(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/beginBackgroundCloudCapture',
            NaVi__pb2.Empty.SerializeToString,
            NaVi__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def endBackgroundCloudCapture(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/endBackgroundCloudCapture',
            NaVi__pb2.Empty.SerializeToString,
            NaVi__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCurrentCloud(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/getCurrentCloud',
            NaVi__pb2.Empty.SerializeToString,
            NaVi__pb2.PointCloud.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def beginCloudStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/NaViInterface.NaViService/beginCloudStream',
            NaVi__pb2.Empty.SerializeToString,
            NaVi__pb2.PointCloud.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def endCloudStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/endCloudStream',
            NaVi__pb2.Empty.SerializeToString,
            NaVi__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getPath(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/getPath',
            NaVi__pb2.Empty.SerializeToString,
            NaVi__pb2.Path.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def openSoilSampleContainer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/openSoilSampleContainer',
            NaVi__pb2.Empty.SerializeToString,
            NaVi__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def closeSoilSampleContainer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/closeSoilSampleContainer',
            NaVi__pb2.Empty.SerializeToString,
            NaVi__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSoilSampleWeight(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/getSoilSampleWeight',
            NaVi__pb2.Empty.SerializeToString,
            NaVi__pb2.Weight.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getDrillWeight(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/getDrillWeight',
            NaVi__pb2.Empty.SerializeToString,
            NaVi__pb2.Weight.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def movePtfRelative(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/movePtfRelative',
            NaVi__pb2.PtfValues.SerializeToString,
            NaVi__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTelemetry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/getTelemetry',
            NaVi__pb2.Empty.SerializeToString,
            NaVi__pb2.Telemetry.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def isReachable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/NaViInterface.NaViService/isReachable',
            NaVi__pb2.Empty.SerializeToString,
            NaVi__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
